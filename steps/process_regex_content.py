import streamlit as st
import polars as pl
from utils import config
from utils.ui_utils import get_column_display_name


def apply_selected_patterns():
    if "df" not in st.session_state or st.session_state.df is None:
        st.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return

    if "origin_df" not in st.session_state or st.session_state.origin_df is None:
        st.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame (origin_df). –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        return

    if "pattern_detector" not in st.session_state or st.session_state.pattern_detector is None:
        st.error("–û—à–∏–±–∫–∞: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")
        return

    df = st.session_state.df.clone()
    origin_df = st.session_state.origin_df
    modified = False
    detector = st.session_state.pattern_detector

    for column, metadata in st.session_state.columns_data.items():
        try:
            if column not in df.columns:
                continue

            if column not in origin_df.columns:
                st.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{column}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ origin_df –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                continue

            prev_patterns = metadata.get("prev_selected_patterns", [])
            selected_patterns = metadata.get("selected_patterns", [])

            if prev_patterns != selected_patterns:
                try:
                    regex_pattern = detector.combine_regex(selected_patterns)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{column}': {e}")
                    continue

                origin_col = origin_df[column].cast(str)

                try:
                    if regex_pattern:
                        pattern_str = regex_pattern.pattern
                        cleaned_col = (
                            origin_col
                            .str.extract_all(pattern_str)
                            .map_elements(lambda matches: "".join(matches), return_dtype=pl.String)
                        )
                    else:
                        cleaned_col = origin_col
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{column}': {e}")
                    continue

                try:
                    df = df.with_columns(
                        cleaned_col.alias(column)
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{column}': {e}")
                    continue

                metadata["prev_selected_patterns"] = selected_patterns.copy()
                modified = True
        except Exception as e:
            st.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–æ–Ω–∫–∏ '{column}': {e}")
            continue

    if modified:
        st.session_state.df = df


def step_regex_content():
    if "df" not in st.session_state or st.session_state.df is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª!")
        return

    st.subheader("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ standalone –∫–æ–ª–æ–Ω–∫–∏ (–±–µ–∑ KeyError)
    columns_data = st.session_state.get("columns_data", {})
    standalone_columns = [
        col for col in st.session_state.df.columns
        if col in columns_data and columns_data.get(col, {}).get("mode") == "standalone"
    ]

    if not standalone_columns:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏",
        standalone_columns,
        format_func=get_column_display_name
    )
    # –ö–ª—é—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –§–æ–ª–±—ç–∫ –Ω–∞ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    key_component = st.session_state.columns_data.get(column, {}).get('hash') or column
    selected_patterns_key = f"selected_patterns_{key_component}"

    if selected_patterns_key not in st.session_state:
        st.session_state[selected_patterns_key] = st.session_state.columns_data.get(column, {}).get("display_patterns", [])

    new_display_patterns = st.multiselect(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫–µ",
        options=st.session_state.columns_data.get(column, {}).get("detected_display_patterns", []),
        default=st.session_state[selected_patterns_key],
        key=f"detected_patterns_{st.session_state.columns_data[column].get('hash')}"
    )

    if new_display_patterns != st.session_state[selected_patterns_key]:
        prev_selected_patterns = st.session_state.columns_data.get(column, {}).get("selected_patterns", [])
        st.session_state[selected_patterns_key] = new_display_patterns
        try:
            selected_patterns = [k for k, v in config.PATTERN_DISPLAY_MAP_UNICODE.items() if v in new_display_patterns]
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            selected_patterns = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        st.session_state.columns_data.setdefault(column, {})
        st.session_state.columns_data[column]["display_patterns"] = new_display_patterns
        st.session_state.columns_data[column]["selected_patterns"] = selected_patterns
        st.session_state.columns_data[column]["prev_selected_patterns"] = prev_selected_patterns

        apply_selected_patterns()
        st.rerun()
