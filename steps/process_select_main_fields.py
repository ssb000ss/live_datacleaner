import streamlit as st
from utils.ui_utils import get_column_display_name
from utils import config


def step_select_main_fields():
    """–®–∞–≥ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π"""
    if "df" not in st.session_state or st.session_state.df is None:
        st.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —à–∞–≥–µ 1!")
        return

    if "load_data" not in st.session_state:
        st.session_state.load_data = {
            "main_info": [],
            "additional_info": [],
        }

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û standalone-–∫–æ–ª–æ–Ω–∫–∏, –∫–∞–∫ –≤ —à–∞–≥–µ "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫"
    columns_data = st.session_state.get("columns_data", {})
    df_columns = [
        col for col in st.session_state.df.columns
        if col in columns_data and columns_data[col].get("mode") == "standalone"
    ]

    # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–µ –∏–∑–º–µ–Ω–∏—Ç –≤—ã–±–æ—Ä
    if not st.session_state.get("main_info_user_set"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (display_name) –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        columns_data = st.session_state.get("columns_data", {})
        target_names = {name.strip().lower() for name in getattr(config, "DEFAULT_COLUMN_NAMES", [])}

        default_main_fields = []
        for col in df_columns:
            display_name = columns_data.get(col, {}).get("display_name", col)
            if display_name.strip().lower() in target_names:
                default_main_fields.append(col)

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if default_main_fields:
            st.session_state.load_data["main_info"] = default_main_fields
            st.session_state.load_data["additional_info"] = [
                col for col in df_columns if col not in default_main_fields
            ]

    st.markdown("## üß© –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Å–Ω–æ–≤–Ω—ã–º–∏ (–∫–æ—Ä–Ω–µ–≤—ã–º–∏) –ø–æ–ª—è–º–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º JSON.")

    # –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ auto-update —á–µ—Ä–µ–∑ on_change
    st.multiselect(
        label="–û—Å–Ω–æ–≤–Ω—ã–µ (–∫–æ—Ä–Ω–µ–≤—ã–µ) –ø–æ–ª—è:",
        options=df_columns,
        default=st.session_state.load_data["main_info"],
        format_func=get_column_display_name,
        key="main_info_selection",
        on_change=handle_main_info_change
    )

    st.markdown("### üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ load_data")
    columns_data = st.session_state.get("columns_data", {})

    def to_display(name: str) -> str:
        return columns_data.get(name, {}).get("display_name", name)

    def map_item(item):
        if isinstance(item, str):
            return to_display(item)
        if isinstance(item, dict):
            return {k: [to_display(x) for x in v] for k, v in item.items()}
        return item

    readable = {
        "main_info": [to_display(c) for c in st.session_state.load_data.get("main_info", [])],
        "additional_info": [map_item(i) for i in st.session_state.load_data.get("additional_info", [])]
    }
    st.json(readable, expanded=True)


def handle_main_info_change():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π"""
    if "main_info_selection" in st.session_state and "df" in st.session_state:
        # –§–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
        st.session_state.main_info_user_set = True
        selected = st.session_state.main_info_selection
        df_columns = st.session_state.df.columns

        # –û–±–Ω–æ–≤–ª—è–µ–º main_info
        st.session_state.load_data["main_info"] = selected

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º additional_info
        st.session_state.load_data["additional_info"] = [
            col for col in df_columns if col not in selected
        ]
