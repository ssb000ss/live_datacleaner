import logging
import streamlit as st
import polars as pl

from utils import config
from utils.ui_utils import get_column_display_name

logger = logging.getLogger(config.APP_TITLE)


def get_pattern_name(pattern_name: str) -> str:
    return config.PATTERN_DISPLAY_MAP_UNICODE.get(pattern_name, '')


def step_format_column_values():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ, –∑–∞–º–µ–Ω—è—è —Å–∏–º–≤–æ–ª—ã –ø–æ regex-—à–∞–±–ª–æ–Ω—É,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç lazy_df, df –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ session_state.
    """
    st.subheader("üß© –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö")
    logger.info("–ó–∞–ø—É—Å–∫ —à–∞–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if "lazy_df" not in st.session_state or "columns_data" not in st.session_state:
        logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ session_state: lazy_df –∏–ª–∏ columns_data")
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫!")
        return

    lazy_df = st.session_state.lazy_df
    columns_data = st.session_state.columns_data

    # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    target_column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        options=[
            col for col in lazy_df.collect_schema().names()
            if columns_data.get(col, {}).get("mode") == "standalone"
        ],
        format_func=get_column_display_name
    )
    logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {target_column}")

    selected_patterns = columns_data.get(target_column, {}).get("selected_patterns", [])

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ regex –∏ –∑–∞–º–µ–Ω—ã
    st.markdown("### üîÅ –ó–∞–º–µ–Ω–∏—Ç—å —Å–∏–º–≤–æ–ª –ø–æ regex")
    col1, col2 = st.columns(2)
    with col1:
        pattern_to_replace = st.selectbox(
            "–ò—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ regex-—à–∞–±–ª–æ–Ω",
            options=selected_patterns,
            format_func=get_pattern_name
        )
    with col2:
        replacement = st.text_input("–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞", value="")

    if st.button("–ó–∞–º–µ–Ω–∏—Ç—å"):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ regex
            if not pattern_to_replace:
                logger.warning("–ü—É—Å—Ç–æ–π regex-—à–∞–±–ª–æ–Ω")
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π regex-—à–∞–±–ª–æ–Ω")
                return

            regex_pattern_to_replace = config.REGEX_PATTERNS_UNICODE.get(pattern_to_replace, '')
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ LazyFrame
            lazy_df = lazy_df.with_columns([
                pl.col(target_column)
                .cast(pl.Utf8, strict=False)
                .fill_null("")
                .str.replace_all(regex_pattern_to_replace, replacement)
                .alias(target_column)
            ])

            logger.debug(
                f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ '{get_pattern_name(pattern_to_replace)}' –Ω–∞ '{replacement}' –≤ –∫–æ–ª–æ–Ω–∫–µ '{target_column}' –¥–ª—è LazyFrame")

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å DataFrame
            new_df = lazy_df.collect().head(1000)
            logger.debug(f"DataFrame –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ LazyFrame –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫–µ '{target_column}'")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            logger.debug(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {columns_data.get(target_column, {})}")
            updated_metadata = replace_patterns_in_metadata(
                column_metadata=columns_data.get(target_column, {}),
                pattern_to_replace=pattern_to_replace,
                replacement=replacement
            )
            st.session_state.columns_data[target_column] = updated_metadata

            logger.info(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{target_column}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {updated_metadata}")

            selected_patterns_key = f"selected_patterns_{st.session_state.columns_data[target_column].get('hash')}"
            if selected_patterns_key not in st.session_state:
                st.session_state[selected_patterns_key] = st.session_state.columns_data[target_column][
                    "display_patterns"]

            old_df = st.session_state.df
            temp_concatenated_columns = {
                col: columns_data[col].copy() for col in old_df.columns
                if st.session_state.columns_data[col].get("concatenated") is not None
            }

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ session_state
            st.session_state.lazy_df = lazy_df
            for col, meta in temp_concatenated_columns.items():
                new_df = new_df.with_columns(old_df[col])

            st.session_state.df = new_df
            st.session_state.origin_df = new_df
            st.session_state[selected_patterns_key] = st.session_state.columns_data[target_column][
                "display_patterns"]

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã LazyFrame
            logger.info("–°—Ö–µ–º–∞ LazyFrame –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã:")
            for name, dtype in lazy_df.collect_schema().items():
                logger.info(f"  {name}: {dtype}")

            st.success(
                f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ '{pattern_to_replace}' –Ω–∞ '{replacement}' –≤ –∫–æ–ª–æ–Ω–∫–µ '{target_column}', –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ '{target_column}'")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≤ –∫–æ–ª–æ–Ω–∫–µ '{target_column}': {e}", exc_info=True)
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ: {e}")


def replace_patterns_in_metadata(
        column_metadata: dict,
        pattern_to_replace: str,
        replacement: str
) -> dict:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∏, –∑–∞–º–µ–Ω—è—è old_pattern –Ω–∞ new_pattern.

    Args:
        column_metadata: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∏.
        pattern_to_replace: Regex-—à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '-').
        replacement: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '.').

    Returns:
        dict: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
    """
    logger = logging.getLogger(config.APP_TITLE)
    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã '{pattern_to_replace}' –Ω–∞ '{replacement}'")
    logger.debug(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {column_metadata}")

    updated_metadata = column_metadata.copy()

    # –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    pattern_map = {v: k for k, v in config.PATTERN_DISPLAY_MAP_UNICODE.items()}
    old_pattern_id = pattern_map.get(pattern_to_replace, pattern_to_replace)
    new_pattern_id = pattern_map.get(replacement, replacement)

    # –°–ø–∏—Å–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    pattern_keys = ["detected_patterns", "prev_selected_patterns", "selected_patterns"]
    for key in pattern_keys:
        if key in updated_metadata:
            patterns = updated_metadata[key].copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            # –î–æ–±–∞–≤–ª—è–µ–º new_pattern_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ replacement –Ω–µ –ø—É—Å—Ç–æ–π
            if new_pattern_id and new_pattern_id not in patterns:
                patterns.append(new_pattern_id)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω '{new_pattern_id}' –≤ '{key}'")
            # –£–¥–∞–ª—è–µ–º old_pattern_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if old_pattern_id in patterns:
                patterns.remove(old_pattern_id)
                logger.debug(f"–£–¥–∞–ª—ë–Ω '{old_pattern_id}' –∏–∑ '{key}'")
            updated_metadata[key] = patterns

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for display_key, base_key in (
            ("detected_display_patterns", "detected_patterns"),
            ("display_patterns", "selected_patterns"),
    ):
        if base_key in updated_metadata:
            updated_metadata[display_key] = [
                config.PATTERN_DISPLAY_MAP_UNICODE.get(p, p)
                for p in updated_metadata[base_key]
            ]
            # –î–ª—è display_patterns —Ñ–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ detected_display_patterns
            if display_key == "display_patterns":
                detected_display = updated_metadata.get("detected_display_patterns", [])
                updated_metadata[display_key] = [p for p in updated_metadata[display_key] if p in detected_display]
            logger.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω —Å–ø–∏—Å–æ–∫ '{display_key}': {updated_metadata[display_key]}")

    logger.debug(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_metadata}")
    return updated_metadata
