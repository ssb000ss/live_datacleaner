import streamlit as st
from utils.ui_utils import get_column_display_name


def step_group_additional_fields():
    """–®–∞–≥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    if "load_data" not in st.session_state:
        st.error("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ!")
        return

    additional_info = st.session_state.load_data.get("additional_info", [])

    st.markdown("## üß© –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
    st.markdown("–í—ã –º–æ–∂–µ—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–ª—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ `additional_info`.")

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è (—Å—Ç—Ä–æ–∫–∏) –∏–∑ additional_info
    flat_fields = [f for f in additional_info if isinstance(f, str)]
    nested_keys = [k for f in additional_info if isinstance(f, dict) for k in f.keys()]
    existing_keys = set(flat_fields + nested_keys)

    with st.form("group_form", clear_on_submit=True):
        selected_fields = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:",
            options=flat_fields,
            format_func=get_column_display_name
        )
        group_key = st.text_input("–ö–ª—é—á –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")

        submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")

        if submitted:
            if not group_key or not selected_fields:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ.")
            elif group_key in existing_keys:
                st.error(f"–ö–ª—é—á '{group_key}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
            else:
                # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
                new_additional_info = [f for f in additional_info if f not in selected_fields]
                new_additional_info.append({group_key: selected_fields})

                st.session_state.load_data["additional_info"] = new_additional_info
                st.rerun()

    st.markdown("---")
    st.markdown("## ‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
    for item in additional_info:
        if isinstance(item, dict):
            key = list(item.keys())[0]
            fields = item[key]
            # –ü–æ–∫–∞–∂–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            pretty_fields = ", ".join(get_column_display_name(f) for f in fields)
            st.caption(f"–ü–æ–ª—è: {pretty_fields}")
            if st.button(f"–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{key}'"):
                updated = [i for i in additional_info if i != item]
                updated.extend(fields)
                st.session_state.load_data["additional_info"] = updated
                st.rerun()

    st.markdown("### üì¶ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ `load_data`")
    # –û—Ç–æ–±—Ä–∞–∑–∏–º —á–∏—Ç–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é —Å display_name –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    readable = {
        "main_info": [get_column_display_name(c) if isinstance(c, str) else c for c in st.session_state.load_data.get("main_info", [])],
        "additional_info": [
            get_column_display_name(c) if isinstance(c, str) else {k: [get_column_display_name(x) for x in v]}
            for c in st.session_state.load_data.get("additional_info", [])
            for k, v in (c.items() if isinstance(c, dict) else [(None, None)])
        ]
    }
    st.json(readable, expanded=True)

