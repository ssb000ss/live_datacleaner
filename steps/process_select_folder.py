import logging
import streamlit as st
from pathlib import Path
import json

from utils import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(config.APP_TITLE)


def get_export_folders():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ exports"""
    exports_path = config.EXPORTS_FOLDER
    if not exports_path.exists():
        return []
    
    folders = []
    for item in exports_path.iterdir():
        if item.is_dir():
            folders.append(item)
    return sorted(folders, key=lambda x: x.name, reverse=True)


def check_required_files(folder_path: Path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
    required_files = {
        "parquet": None,
        "workflow": None,
        "columns_data": None
    }
    
    # –ò—â–µ–º parquet —Ñ–∞–π–ª
    for file in folder_path.glob("*.parquet"):
        required_files["parquet"] = file
        break
    
    # –ò—â–µ–º workflow.json
    workflow_file = folder_path / "workflow.json"
    if workflow_file.exists():
        required_files["workflow"] = workflow_file
    
    # –ò—â–µ–º columns_data.json
    columns_file = folder_path / "columns_data.json"
    if columns_file.exists():
        required_files["columns_data"] = columns_file
    
    return required_files


def load_workflow_data(workflow_path: Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ workflow.json"""
    try:
        with open(workflow_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow: {e}")
        return None


def load_columns_data(columns_path: Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ columns_data.json"""
    try:
        with open(columns_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ columns_data: {e}")
        return None


def step_select_folder():
    """–®–∞–≥ 0: –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ exports"""
    st.markdown("# –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–∑ exports, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
    export_folders = get_export_folders()
    
    if not export_folders:
        st.warning("üìÅ –ü–∞–ø–∫–∞ exports –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        st.info("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ workflow —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É exports.")
        return
    
    # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
    folder_options = {folder.name: folder for folder in export_folders}
    selected_folder_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
        options=list(folder_options.keys()),
        help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    if selected_folder_name:
        selected_folder = folder_options[selected_folder_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        st.markdown("### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")
        required_files = check_required_files(selected_folder)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if required_files["parquet"]:
                st.success(f"‚úÖ Parquet —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
                st.caption(f"üìÑ {required_files['parquet'].name}")
            else:
                st.error("‚ùå Parquet —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with col2:
            if required_files["workflow"]:
                st.success(f"‚úÖ Workflow –Ω–∞–π–¥–µ–Ω")
                st.caption(f"‚öôÔ∏è {required_files['workflow'].name}")
            else:
                st.error("‚ùå Workflow —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with col3:
            if required_files["columns_data"]:
                st.success(f"‚úÖ Columns data –Ω–∞–π–¥–µ–Ω")
                st.caption(f"üìä {required_files['columns_data'].name}")
            else:
                st.error("‚ùå Columns data —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã
        all_files_present = all(required_files.values())
        
        if all_files_present:
            st.success("üéâ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
            
            if st.button("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    workflow_data = load_workflow_data(required_files["workflow"])
                    columns_data = load_columns_data(required_files["columns_data"])
                    
                    if workflow_data and columns_data:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                        st.session_state.source_folder = selected_folder
                        st.session_state.parquet_file = required_files["parquet"]
                        st.session_state.workflow_file = required_files["workflow"]
                        st.session_state.columns_file = required_files["columns_data"]
                        st.session_state.workflow_data = workflow_data
                        st.session_state.columns_data = columns_data
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º parquet —Ñ–∞–π–ª
                        import polars as pl
                        lazy_df = pl.scan_parquet(str(required_files["parquet"]))
                        st.session_state.lazy_df = lazy_df
                        st.session_state.origin_df = lazy_df.limit(5000).collect()
                        st.session_state.df = st.session_state.origin_df.clone()
                        
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            missing_files = [name for name, file in required_files.items() if not file]
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–æ–≤"):
        st.markdown("""
        **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:**
        - `*.parquet` - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        - `workflow.json` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        - `columns_data.json` - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–æ–∫
        
        **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ exports:**
        ```
        exports/
        ‚îî‚îÄ‚îÄ your_project_20240101_120000/
            ‚îú‚îÄ‚îÄ data.parquet
            ‚îú‚îÄ‚îÄ workflow.json
            ‚îî‚îÄ‚îÄ columns_data.json
        ```
        """)
