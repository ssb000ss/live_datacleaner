#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GUI –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CLI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.
"""

import streamlit as st
import subprocess
import json
import os
from pathlib import Path
import tempfile
from datetime import datetime
# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ - –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å –∏–∑ workflow

st.set_page_config(page_title="Simple Data Processor", page_icon="üöÄ")

st.title("üöÄ Simple Data Processor")
st.markdown("–ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è CLI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìÅ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏–∑ exports
    exports_path = Path("exports")
    export_folders = []

    if exports_path.exists():
        for item in exports_path.iterdir():
            if item.is_dir():
                export_folders.append(item)
        export_folders = sorted(export_folders, key=lambda x: x.name, reverse=True)

    if not export_folders:
        st.warning("üìÅ –ü–∞–ø–∫–∞ exports –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        st.info("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ workflow —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É exports.")
        input_path = None
        workflow_path = None
        columns_data_path = None
    else:
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_options = {folder.name: folder for folder in export_folders}
        selected_folder_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
            options=list(folder_options.keys()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )

        if selected_folder_name:
            selected_folder = folder_options[selected_folder_name]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
            st.markdown("### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")

            # –ò—â–µ–º —Ñ–∞–π–ª—ã
            parquet_files = list(selected_folder.glob("*.parquet"))
            workflow_file = selected_folder / "workflow.json"
            columns_file = selected_folder / "columns_data.json"

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤
            col_parquet, col_workflow, col_columns = st.columns(3)

            with col_parquet:
                if parquet_files:
                    st.success("‚úÖ Parquet —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
                    st.caption(f"üìÑ {parquet_files[0].name}")
                    input_path = str(parquet_files[0])
                else:
                    st.error("‚ùå Parquet —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    input_path = None

            with col_workflow:
                if workflow_file.exists():
                    st.success("‚úÖ Workflow –Ω–∞–π–¥–µ–Ω")
                    st.caption(f"‚öôÔ∏è {workflow_file.name}")
                    workflow_path = str(workflow_file)
                else:
                    st.error("‚ùå Workflow —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    workflow_path = None

            with col_columns:
                if columns_file.exists():
                    st.success("‚úÖ Columns data –Ω–∞–π–¥–µ–Ω")
                    st.caption(f"üìä {columns_file.name}")
                    columns_data_path = str(columns_file)
                else:
                    st.error("‚ùå Columns data —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    columns_data_path = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã
            all_files_present = all([input_path, workflow_path, columns_data_path])

            if all_files_present:
                st.success("üéâ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
            else:
                missing_files = []
                if not input_path:
                    missing_files.append("Parquet —Ñ–∞–π–ª")
                if not workflow_path:
                    missing_files.append("Workflow —Ñ–∞–π–ª")
                if not columns_data_path:
                    missing_files.append("Columns data —Ñ–∞–π–ª")

                st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã.")
        else:
            input_path = None
            workflow_path = None
            columns_data_path = None

with col2:
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    chunk_size = st.number_input("–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞:", value=100000, min_value=10000, max_value=1000000)
    max_memory = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å (%):", value=80, min_value=50, max_value=95)

    # –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: parquet
    export_format = "parquet"

    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —á–∏—Ç–∞–µ–º –∏–∑ workflow
    output_filename = "processed_parquet.parquet"  # fallback
    if workflow_path and workflow_path.exists():
        try:
            with open(workflow_path, 'r', encoding='utf-8') as f:
                workflow_data = json.load(f)
                if "output_filename" in workflow_data:
                    output_filename = workflow_data["output_filename"]
                    st.info(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ workflow: `{output_filename}`")
                else:
                    st.warning("‚ö†Ô∏è –í workflow –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è workflow: {e}")
    else:
        st.warning("‚ö†Ô∏è Workflow —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")

    # –ê–Ω–∞–ª–∏–∑ –∫—ç—à (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏)
    if 'columns_data_path' in locals() and columns_data_path:
        st.success(f"‚úÖ Columns data: {Path(columns_data_path).name}")
        analyze_cache_path = columns_data_path
    else:
        analyze_cache_path = st.text_input(
            "–ü—É—Ç—å –∫ analyze_cache (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            value="",
            help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É columns_data.json –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"
        )

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å workflow", type="secondary"):
    if workflow_path and Path(workflow_path).exists():
        try:
            with open(workflow_path, 'r', encoding='utf-8') as f:
                workflow_data = json.load(f)

            st.success("‚úÖ Workflow —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É workflow
            st.subheader("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ workflow:")
            st.json(workflow_data)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if 'steps' in workflow_data:
                st.subheader("üîÑ –®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                for i, step in enumerate(workflow_data['steps'], 1):
                    st.write(f"{i}. {step.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥')}")

        except json.JSONDecodeError as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ: {e}")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è workflow: {e}")
    else:
        st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ workflow —Ñ–∞–π–ª—É")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary"):
    if not input_path or not workflow_path:
        st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        input_file = Path(input_path)
        workflow_file = Path(workflow_path)

        if not input_file.exists():
            st.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        elif not workflow_file.exists():
            st.error(f"‚ùå Workflow —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {workflow_path}")
        else:
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
            output_path = Path("exports") / output_filename
            output_path.parent.mkdir(parents=True, exist_ok=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            cmd = [
                'python', 'cli_process.py',
                '--path', str(input_file),
                '--workflow', str(workflow_file),
                '--output', str(output_path),
                '--chunk-size', str(chunk_size),
                '--max-memory', str(max_memory)
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if analyze_cache_path and Path(analyze_cache_path).exists():
                cmd.extend(['--analyze_cache', str(analyze_cache_path)])

            # –§–æ—Ä–º–∞—Ç –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º ‚Äî –≤—Å–µ–≥–¥–∞ parquet

            st.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_container = st.container()
                status_container = st.container()

                with progress_container:
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                with status_container:
                    log_container = st.empty()

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )

                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
                stdout_lines = []

                while True:
                    output = process.stdout.readline()
                    if output == '' and process.poll() is not None:
                        break
                    if output:
                        stdout_lines.append(output.strip())
                        if len(stdout_lines) > 200:
                            stdout_lines = stdout_lines[-200:]
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                        with log_container:
                            st.text_area("–õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", value="\n".join(stdout_lines[-50:]), height=200)

                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                stdout, _ = process.communicate()
                result = subprocess.CompletedProcess(
                    args=cmd,
                    returncode=process.returncode,
                    stdout=stdout,
                    stderr=stderr
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_bar.progress(1.0)
                status_text.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.returncode == 0:
                    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    if output_path.exists():
                        file_size = output_path.stat().st_size
                        st.metric("–†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", f"{file_size / (1024 * 1024):.1f} MB")
                        st.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        with open(output_path, "rb") as file:
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                                data=file.read(),
                                file_name=output_path.name,
                                mime="application/octet-stream"
                            )

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                        if "processed_files" not in st.session_state:
                            st.session_state.processed_files = []

                        st.session_state.processed_files.append({
                            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "input_file": str(input_file),
                            "output_file": str(output_path),
                            "file_size": file_size,
                            "chunk_size": chunk_size,
                            "max_memory": max_memory
                        })

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
                    if result.stdout:
                        st.subheader("üìã –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
                        st.text_area("", value=result.stdout[-1000:], height=300)

                else:
                    st.error("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    st.subheader("üìã –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):")
                    err_text = result.stdout or ""
                    st.text_area("", value=err_text[-2000:], height=300)

            except subprocess.TimeoutExpired:
                st.error("‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (1 —á–∞—Å)")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
st.subheader("üñ•Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
if st.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å CLI –∫–æ–º–∞–Ω–¥—É"):
    if input_path and workflow_path:
        cli_command = f"""python cli_process.py \\
    --path {input_path} \\
    --workflow {workflow_path} \\
    --output {output_path} \\
    --chunk-size {chunk_size} \\
    --max-memory {max_memory}"""

        st.code(cli_command, language="bash")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º")

# –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
if "processed_files" in st.session_state and st.session_state.processed_files:
    st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    for i, file_info in enumerate(reversed(st.session_state.processed_files[-5:])):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        with st.expander(f"üïí {file_info['timestamp']} - {Path(file_info['input_file']).name}"):
            col1, col2, col3 = st.columns(3)

            with col1:
                st.write(f"**–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:** {Path(file_info['input_file']).name}")
                st.write(f"**–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:** {Path(file_info['output_file']).name}")

            with col2:
                st.write(f"**–†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:** {file_info['file_size'] / (1024 * 1024):.1f} MB")
                st.write(f"**–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞:** {file_info['chunk_size']:,}")

            with col3:
                st.write(f"**–ú–∞–∫—Å. –ø–∞–º—è—Ç—å:** {file_info['max_memory']}%")

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                if Path(file_info['output_file']).exists():
                    with open(file_info['output_file'], "rb") as file:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å",
                            data=file.read(),
                            file_name=Path(file_info['output_file']).name,
                            mime="application/octet-stream",
                            key=f"download_{i}"
                        )
                else:
                    st.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
