#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import csv
import chardet
import logging
from pathlib import Path
from typing import Generator, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('streaming_csv_parser.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def detect_encoding(file_path: Path, sample_size: int = 10000) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "rb") as f:
            raw_data = f.read(sample_size)
            result = chardet.detect(raw_data)
            encoding = result['encoding'] or 'utf-8'

            if encoding.lower() == 'ascii':
                encoding = 'utf-8'

            logger.info(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}")
            return encoding
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º utf-8")
        return 'utf-8'


def detect_delimiter(file_path: Path, encoding: str, max_lines: int = 30) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV."""
    try:
        with open(file_path, 'r', encoding=encoding, errors='ignore') as f:
            lines = [f.readline() for _ in range(max_lines)]
            sample = ''.join(lines)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π CSV sniffer
            sniffer = csv.Sniffer()
            try:
                dialect = sniffer.sniff(sample)
                delimiter = dialect.delimiter
                logger.info(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: {repr(delimiter)}")
                return delimiter
            except csv.Error:
                # Fallback –Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                delimiters = [',', ';', '\t', '|']
                counts = {d: sum(line.count(d) for line in lines) for d in delimiters}
                delimiter = max(counts, key=counts.get)
                logger.info(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑): {repr(delimiter)}")
                return delimiter
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—É—é")
        return ','


def process_csv_streaming(input_path: Path, output_path: Path, bad_path: Path,
                          encoding: str, delimiter: str, export_delimiter: str = '~',
                          batch_size: int = 10000):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSV –ø–æ—Ç–æ–∫–æ–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏."""

    valid_count = 0
    bad_count = 0

    try:
        with open(input_path, 'r', encoding=encoding, errors='ignore', newline='') as infile, \
                open(output_path, 'w', encoding='utf-8', newline='') as outfile, \
                open(bad_path, 'w', encoding='utf-8', newline='') as badfile:

            # –°–æ–∑–¥–∞–µ–º CSV reader —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
            reader = csv.reader(infile, delimiter=delimiter, quoting=csv.QUOTE_MINIMAL)

            # –°–æ–∑–¥–∞–µ–º CSV writer —Å –Ω–æ–≤—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            writer = csv.writer(outfile, delimiter=export_delimiter, quoting=csv.QUOTE_ALL)
            bad_writer = csv.writer(badfile, delimiter=export_delimiter, quoting=csv.QUOTE_ALL)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ bad —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
            bad_header = ['–ù–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏', '–¢–∏–ø_–æ—à–∏–±–∫–∏', '–û–ø–∏—Å–∞–Ω–∏–µ_–æ—à–∏–±–∫–∏', '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ_—Å—Ç—Ä–æ–∫–∏']
            bad_writer.writerow(bad_header)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                header = next(reader)
                writer.writerow(header)
                expected_columns = len(header)
                logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {expected_columns} —Å—Ç–æ–ª–±—Ü–æ–≤")
                logger.info(f"üîß –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: {repr(export_delimiter)}")
            except StopIteration:
                logger.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ
            for row_num, row in enumerate(reader, start=2):
                try:
                    if len(row) == expected_columns:
                        # –í–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                        writer.writerow(row)
                        valid_count += 1

                        if valid_count % batch_size == 0:
                            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_count}")

                    else:
                        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
                        error_desc = f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(row)} –≤–º–µ—Å—Ç–æ {expected_columns}"
                        bad_writer.writerow([row_num, "–û—à–∏–±–∫–∞_—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", error_desc, delimiter.join(row)])
                        bad_count += 1

                        if bad_count % 1000 == 0:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {bad_count}")

                except Exception as e:
                    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏
                    error_desc = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)[:100]}"
                    bad_writer.writerow([row_num, "–û—à–∏–±–∫–∞_–æ–±—Ä–∞–±–æ—Ç–∫–∏", error_desc, delimiter.join(row)])
                    bad_count += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}, –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {bad_count}")
    return valid_count, bad_count


def main():
    parser = argparse.ArgumentParser(description='–ü–æ—Ç–æ–∫–æ–≤—ã–π CSV –ø–∞—Ä—Å–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–¥–∫–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º')
    parser.add_argument('input_path', help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É')
    parser.add_argument('output_path', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ CSV')
    parser.add_argument('bad_path', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫')
    parser.add_argument('--encoding', help='–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    parser.add_argument('--delimiter', help='–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤—Ö–æ–¥–Ω–æ–≥–æ CSV (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    parser.add_argument('--export_delimiter', default='~', help='–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ~)')
    parser.add_argument('--sample_size', type=int, default=10000,
                        help='–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏')
    parser.add_argument('--batch_size', type=int, default=10000,
                        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')

    args = parser.parse_args()

    input_path = Path(args.input_path)
    output_path = Path(args.output_path)
    bad_path = Path(args.bad_path)

    if not input_path.exists():
        logger.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–∞
        encoding = args.encoding or detect_encoding(input_path, args.sample_size)
        delimiter = args.delimiter or detect_delimiter(input_path, encoding)
        export_delimiter = args.export_delimiter

        logger.info(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: encoding={encoding}, –≤—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å={repr(delimiter)}")
        logger.info(f"üîß –í—ã—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: {repr(export_delimiter)}")
        logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {input_path.stat().st_size / (1024 * 1024):.1f} MB")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV
        valid_count, bad_count = process_csv_streaming(
            input_path, output_path, bad_path, encoding, delimiter, export_delimiter, args.batch_size
        )

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
