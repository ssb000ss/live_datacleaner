import streamlit as st

from utils.data_cleaner import PatternDetector
from utils.file_manager import FileManager
from utils.ui_utils import data_analyze, apply_selected_patterns
from utils import config


def initialize_session_state():
    if "file_manager" not in st.session_state:
        st.session_state.file_manager = None
    if "origin_df" not in st.session_state:
        st.session_state.origin_df = None
    if "df" not in st.session_state:
        st.session_state.df = None
    if "full_df" not in st.session_state:
        st.session_state.full_df = None
    if "pattern_detector" not in st.session_state:
        st.session_state.pattern_detector = PatternDetector()
    if "columns_data" not in st.session_state:
        st.session_state.columns_data = {}


def step_load_file():
    data1 = "/Users/dev/Documents/projects/live_datacleaner/data/emias.csv"
    file_path = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É:", value=data1)
    if file_path:
        st.session_state.file_manager = FileManager(file_path)
        df, encoding, delimiter = st.session_state.file_manager.load_data()
        if df is not None:
            st.session_state.origin_df = df.copy()
            if data_analyze(dxf):
                st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}, –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{delimiter}'")
                if "df" not in st.session_state or st.session_state.df is None:
                    st.session_state.df = st.session_state.origin_df.copy()
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")


def step_process_column_names():
    if "df" not in st.session_state or st.session_state.df is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —à–∞–≥–µ 1!")
        return
    st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–æ–∫")
    col1, col2 = st.columns([2, 2])
    with col1:
        standalone_columns = [
            column for column in st.session_state.df.columns
            if st.session_state.columns_data[column]["mode"] == "standalone"
        ]
        column = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏",
            standalone_columns
        )

    with col2:
        new_column_name = st.text_input(
            "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏",
            value=st.session_state.columns_data[column]["display_name"]
        )
        old_display_name = st.session_state.columns_data[column]["display_name"]
        if new_column_name != old_display_name:
            display_names = [name["display_name"] for name in st.session_state.columns_data.values()]
            if new_column_name in display_names:
                st.error(f"{new_column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                st.session_state.columns_data[column]["display_name"] = old_display_name
            elif not new_column_name.strip():
                st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            else:
                st.session_state.columns_data[column]["display_name"] = new_column_name.strip()
                st.success(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: **{column} ‚Üí {new_column_name}**")

    # üî• –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –≥–ª–∞–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    st.markdown(
        "üìù **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ **–≥–ª–∞–≤–Ω–æ–µ**, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
        f"üîπ `{', '.join(config.DEFAULT_COLUMN_NAMES)}`"
    )


def step_exclude_columns():
    if "df" not in st.session_state or st.session_state.df is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —à–∞–≥–µ 1!")
        return

    st.subheader("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, —É–∂–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
    excluded_list = [
        column for column in st.session_state.df.columns
        if st.session_state.columns_data[column]["mode"] == "exclude"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    ]

    # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    exclude_columns = st.multiselect(
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        options=st.session_state.df.columns.tolist(),
        default=excluded_list  # –ß—Ç–æ–±—ã —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
    )

    if st.button("–ò—Å–∫–ª—é—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏", disabled=not exclude_columns):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
        for column in st.session_state.df.columns:
            if column in exclude_columns:
                st.session_state.columns_data[column]["mode"] = "exclude"
            else:
                st.session_state.columns_data[column]["mode"] = "standalone"


def step_regex_content():
    if "full_df" not in st.session_state or st.session_state.full_df is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —à–∞–≥–µ 1!")
        return
    st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º.")
    standalone_columns = [
        column for column in st.session_state.full_df.columns
        if st.session_state.columns_data[column]["mode"] == "standalone"
    ]
    column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏",
        standalone_columns
    )

    selected_patterns_key = f"selected_patterns_{column}"
    if selected_patterns_key not in st.session_state:
        st.session_state[selected_patterns_key] = st.session_state.columns_data[column]["display_patterns"]

    new_display_patterns = st.multiselect(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫–µ",
        options=st.session_state.columns_data[column]["detected_display_patterns"],
        default=st.session_state[selected_patterns_key],
        key=f"detected_patterns_{column}"
    )
    if new_display_patterns != st.session_state[selected_patterns_key]:
        prev_selected_patterns = st.session_state.columns_data[column]["selected_patterns"].copy()
        st.session_state[selected_patterns_key] = new_display_patterns
        selected_patterns = [k for k, v in config.PATTERN_DISPLAY_MAP.items() if v in new_display_patterns]
        st.session_state.columns_data[column]["display_patterns"] = new_display_patterns
        st.session_state.columns_data[column]["selected_patterns"] = selected_patterns
        st.session_state.columns_data[column]["prev_selected_patterns"] = prev_selected_patterns
        apply_selected_patterns()
        st.rerun()


def step_concatenate_columns():
    st.subheader("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
    standalone_columns = [
        column for column in st.session_state.df.columns
        if st.session_state.columns_data[column]["mode"] == "standalone"
    ]
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    columns_to_concat = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:",
        options=standalone_columns,
    )

    # –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    concat_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏:", value="concatenated_column")

    # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ–±–µ–ª)
    separator = st.text_input("–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:", value=" ")

    # –ö–Ω–æ–ø–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã)
    if st.button("–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏", disabled=not columns_to_concat):
        if concat_name in st.session_state.df.columns:
            st.error(f"–ö–æ–ª–æ–Ω–∫–∞ '{concat_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        elif columns_to_concat:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
            st.session_state.df[concat_name] = st.session_state.df[columns_to_concat] \
                .astype(str) \
                .apply(lambda row: separator.join(row.dropna()), axis=1)

            # üî• –û–±–Ω–æ–≤–ª—è–µ–º `columns_data`, —á—Ç–æ–±—ã –∫–æ–ª–æ–Ω–∫–∞ —É—á–∏—Ç—ã–≤–∞–ª–∞—Å—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∞–Ω–∞–ª–∏–∑–µ
            st.session_state.columns_data[concat_name] = {
                "column": concat_name,
                "origin_name": concat_name,
                "display_name": concat_name,
                "detected_patterns": [],
                "prev_selected_patterns": None,
                "selected_patterns": [],
                "detected_display_patterns": [],
                "display_patterns": [],
                "mode": "standalone",
                "concated": None
            }

            st.success(f"–ö–æ–ª–æ–Ω–∫–∏ {columns_to_concat} –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ '{concat_name}'")


def step_deduplicate_validate():
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    drop_duplicates = st.checkbox("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", value=False)
    if drop_duplicates and st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"):
        initial_rows = len(st.session_state.df)
        st.session_state.df = st.session_state.df.drop_duplicates()
        st.success(f"–£–¥–∞–ª–µ–Ω–æ {initial_rows - len(st.session_state.df)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

    validate_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", st.session_state.df.columns)
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
        empty_count = st.session_state.df[validate_column].isna().sum()
        st.info(f"–í –∫–æ–ª–æ–Ω–∫–µ '{validate_column}' –Ω–∞–π–¥–µ–Ω–æ {empty_count} –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")


def step_export():
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    export_path = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV", value="output.csv")
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
        st.session_state.df.to_csv(export_path, index=False)
        st.success(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {export_path}")
