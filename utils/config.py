import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

def get_env_path(key: str, default: str) -> Path:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ Path –æ–±—ä–µ–∫—Ç"""
    value = os.getenv(key, default)
    path = Path(value)
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ BASE_FOLDER
    if not path.is_absolute():
        base_folder = Path(os.getenv('BASE_FOLDER', '.')).resolve()
        path = base_folder / path
    
    return path.resolve()

def get_env_list(key: str, default: str, separator: str = ',') -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.getenv(key, default)
    return [item.strip() for item in value.split(separator) if item.strip()]

def get_env_set(key: str, default: str, separator: str = ',') -> set:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return set(get_env_list(key, default, separator))

REGEX_PATTERNS_UNICODE = {
    # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    "kazakh_cyrillic": r"[\u04D8\u04D9\u0406\u0456\u04B0\u04B1]",  # ”ò”ô, –Ü—ñ, “∞“±
    "uzbek_cyrillic": r"[\u040E\u045E\u04B2\u04B3]",  # –é—û, “≤“≥
    "cyrillic_common": r"[\u0410-\u044F\u0401\u0451]",  # –ê-–Ø, –∞-—è, –Å—ë
    "cyrillic_extended": r"[\u04E8\u04E9\u04AF\u04B1\u04A2\u04A3\u049A\u049B\u0492\u0493]",  # ”®”©, “Æ“Ø, “¢“£, “ö“õ, “í“ì

    # –õ–∞—Ç–∏–Ω–∏—Ü–∞
    "latyn_kazakh": r"[\u00E4\u00C4\u011F\u011E\u0131\u0130\u00F1\u00D1\u015F\u015E]",  # √§√Ñ, ƒüƒû, ƒ±ƒ∞, √±√ë, ≈ü≈û
    "latyn_uzbek": r"[\u02BB\u02BC]",  #  º
    "latin_basic": r"[A-Za-z]",  # A‚ÄìZ, a‚Äìz
    "latin_extended": r"[\u00F6\u00D6\u00FC\u00DC]",  # √∂√ñ, √º√ú

    # –¶–∏—Ñ—Ä—ã
    "digits": r"[0-9]",  # 0‚Äì9

    # –ü—Ä–æ–±–µ–ª—ã –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    "space": r"\u0020",  # –ø—Ä–æ–±–µ–ª
    "newline": r"\u000A",  # LF
    "literal_escaped_space": r"\\u0020",  # –±—É–∫–≤–∞–ª—å–Ω–∞—è "\u0020"
    "literal_escaped_newline": r"\\u000A",  # –±—É–∫–≤–∞–ª—å–Ω–∞—è "\u000A"

    # –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
    "colon": r":",  # :
    "semicolon": r";",  # ;
    "hyphen": r"-",  # -
    "underscore": r"_",  # _
    "period": r"\.",  # .
    "comma": r",",  # ,

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    "backslash": r"\\",  # \
    "forward_slash": r"/",  # /
    "vertical_bar": r"\|",  # |

    # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    "double_quote": r'"',  # "
    "single_quote": r"'",  # '
    "dollar": r"\$",  # $
    "at": r"@",  # @
    "hash": r"#",  # #
    "asterisk": r"\*"  # *
}

PATTERN_DISPLAY_MAP_UNICODE = {
    # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    "kazakh_cyrillic": "–ö–∞–∑–∞—Ö—Å–∫–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (”ò”ô, –Ü—ñ, “∞“±)",
    "uzbek_cyrillic": "–£–∑–±–µ–∫—Å–∫–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (–é—û, “≤“≥)",
    "cyrillic_common": "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–ê-–Ø, –∞-—è, –Å—ë)",
    "cyrillic_extended": "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (”®”©, “Æ“Ø, “¢“£, “ö“õ, “í“ì)",

    # –õ–∞—Ç–∏–Ω–∏—Ü–∞
    "latyn_kazakh": "–ö–∞–∑–∞—Ö—Å–∫–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ (√§√Ñ, ƒüƒû, ƒ±ƒ∞, √±√ë, ≈ü≈û)",
    "latyn_uzbek": "–£–∑–±–µ–∫—Å–∫–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ ( º)",
    "latin_basic": "–õ–∞—Ç–∏–Ω–∏—Ü–∞ (A‚ÄìZ, a‚Äìz)",
    "latin_extended": "–õ–∞—Ç–∏–Ω–∏—Ü–∞ (√∂√ñ, √º√ú)",

    # –¶–∏—Ñ—Ä—ã
    "digits": "–¶–∏—Ñ—Ä—ã (0‚Äì9)",

    # –ü—Ä–æ–±–µ–ª—ã –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    "space": "–ü—Ä–æ–±–µ–ª",
    "newline": "–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞",
    "literal_escaped_space": "–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª (\\u0020)",
    "literal_escaped_newline": "–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (\\u000A)",

    # –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
    "colon": ":",
    "semicolon": ";",
    "hyphen": "-",
    "underscore": "_",
    "period": ".",
    "comma": ",",

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    "backslash": "\\",
    "forward_slash": "/",
    "vertical_bar": "|",

    # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    "double_quote": '"',
    "single_quote": "'",
    "dollar": "$",
    "at": "@",
    "hash": "#",
    "asterisk": "*"
}

# –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –¥–ª—è stepper_bar
STEPS = [
    "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞",
    "–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫",
    "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫",
    "–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–æ–∫",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
    "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è",
    "–≠–∫—Å–ø–æ—Ä—Ç"
]

DEFAULT_COLUMN_NAMES = [
    "fio",
    "nickname",
    "number_phone",
    "email",
    "car_number",
    "address",
    "password",
    "birthday",
]

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_TITLE = os.getenv('APP_TITLE', 'LiveDataCleaner')
PAGE_ICON = os.getenv('PAGE_ICON', 'üìä')
CSS_PATH = os.getenv('CSS_PATH', 'static/style.css')
ANALYZE_ROWS = int(os.getenv('ANALYZE_ROWS', '1000'))

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ .env)
BASE_FOLDER = get_env_path('BASE_FOLDER', '.')
INPUT_FOLDER = get_env_path('INPUT_FOLDER', 'data')
LOG_FOLDER = get_env_path('LOG_FOLDER', 'logs')
PARQUET_FOLDER = get_env_path('PARQUET_FOLDER', 'parquet_cache')

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
WORKFLOWS_FOLDER = get_env_path('WORKFLOWS_FOLDER', 'workflows')
EXPORTS_FOLDER = get_env_path('EXPORTS_FOLDER', 'exports')
ANALYZE_CACHE_FOLDER = get_env_path('ANALYZE_CACHE_FOLDER', 'analyze_cache')
STATIC_FOLDER = get_env_path('STATIC_FOLDER', 'static')

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TEMP_FOLDER = get_env_path('TEMP_FOLDER', '') if os.getenv('TEMP_FOLDER') else None

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
COMPATIBLE_EXTENSIONS = get_env_list('COMPATIBLE_EXTENSIONS', '.csv,.txt')

# –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
ALLOWED_COUNTRY_CODES = get_env_set('ALLOWED_COUNTRY_CODES', 'ru,kg,uz,tm,ua,by,nl,az')

# Transliteration mapping for Cyrillic to Latin
CYRILLIC_TO_LATIN_MAPPING = {
    "–∞": "a", "–±": "b", "–≤": "v", "–≥": "g", "–¥": "d", "–µ": "e", "—ë": "e",
    "–∂": "zh", "–∑": "z", "–∏": "i", "–π": "y", "–∫": "k", "–ª": "l", "–º": "m",
    "–Ω": "n", "–æ": "o", "–ø": "p", "—Ä": "r", "—Å": "s", "—Ç": "t", "—É": "u",
    "—Ñ": "f", "—Ö": "kh", "—Ü": "ts", "—á": "ch", "—à": "sh", "—â": "shch", "—ä": "",
    "—ã": "y", "—å": "", "—ç": "e", "—é": "yu", "—è": "ya",
    # Uppercase
    "–ê": "a", "–ë": "b", "–í": "v", "–ì": "g", "–î": "d", "–ï": "e", "–Å": "e",
    "–ñ": "zh", "–ó": "z", "–ò": "i", "–ô": "y", "–ö": "k", "–õ": "l", "–ú": "m",
    "–ù": "n", "–û": "o", "–ü": "p", "–†": "r", "–°": "s", "–¢": "t", "–£": "u",
    "–§": "f", "–•": "kh", "–¶": "ts", "–ß": "ch", "–®": "sh", "–©": "shch", "–™": "",
    "–´": "y", "–¨": "", "–≠": "e", "–Æ": "yu", "–Ø": "ya",
}


def ensure_directories() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫ –∏ —Å–æ–∑–¥–∞—ë—Ç –∏—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ –ø–∞–ø–∫–∏ –±—ã–ª–∏ –≥–æ—Ç–æ–≤—ã.
    """
    dirs = [
        INPUT_FOLDER,
        LOG_FOLDER,
        PARQUET_FOLDER,
        WORKFLOWS_FOLDER,
        EXPORTS_FOLDER,
        ANALYZE_CACHE_FOLDER,
        STATIC_FOLDER,
    ]
    # TEMP_FOLDER –º–æ–∂–µ—Ç –±—ã—Ç—å None, —Å–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if TEMP_FOLDER:
        dirs.append(TEMP_FOLDER)

    for d in dirs:
        try:
            d.mkdir(parents=True, exist_ok=True)
        except Exception:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç.–ø.
            pass


# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
ensure_directories()
